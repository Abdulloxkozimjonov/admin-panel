from django.shortcuts import render, redirect
from .models import *
from datetime import datetime, timedelta
from django.db.models import Count
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.db.models.functions import ExtractDay, ExtractMonth, ExtractWeek
from django.contrib.auth.decorators import login_required
import calendar
from main.models import User
from django.contrib.auth import login, authenticate, logout


def PagenatorPage(List, num, request):
    paginator = Paginator (List, num)
    pages = request. GET.get( 'page')
    try:
        list = paginator. page (pages)
    except PageNotAnInteger:
        list = paginator. page (1)
    except EmptyPage:
        list = paginator.page(paginator.num_pages)
    return list


def dashboard_page_view(request):
    costumers = Xaridorlar.objects.all().order_by('id')
    all_home =  Home.objects.all().order_by('id')
    day = datetime.today() - timedelta(days=1)
    month = datetime.today() - timedelta(days=30)
    week = datetime.today() - timedelta(days=7)
    today = Home.objects.filter(date__gte=day)
    month = Home.objects.filter(date__gte=month)
    week = Home.objects.filter(date__gte=week)
    context = {
        'all_home': all_home,
        'today': today,
        'month': month,
        'week': week,
        "a": PagenatorPage(costumers, 5, request)
    }
    return render(request, 'index.html', context)


def home_view(request):
    return render(request, 'home.html')

def create_xaridorlar_view(request):
    if request.method == 'POST':
        ism = request.POST['ism']
        familya = request.POST['familya']
        email = request.POST['email']
        tel_raqam = request.POST['tel_raqam']
        xaridorlar = Xaridorlar.objects.create(
            ism=ism,
            familya=familya,
            email=email,
            tel_raqam=tel_raqam,
        )
        xaridorlar.save()
        return redirect('index_url')



# @login_required(login_url='login_url')
def home2_view(request):
    all_register = User.objects.all().order_by('id').count()
    day = datetime.today() - timedelta(days=1)
    month = datetime.today() - timedelta(days=30)
    today = User.objects.filter(created__gte=day).count()
    months = User.objects.filter(created__gte=month).count()
    qs = User.objects.filter(
        created__gte=month
    ).annotate(
        day=ExtractDay("created"),
        mon=ExtractMonth('created'),
    ).values(
        'day', 'mon'
    ).annotate(
        n=Count('pk')
    ).order_by('mon')
    mon_list = []
    for i in qs:
        i['mon'] = (calendar.month_abbr[i['mon']])
        if len(mon_list) >= 30:
            del mon_list[0]
            mon_list.append(i)
        else:
            mon_list.append(i)
    context = {
       "all_register":all_register,
       "today":today,
       "month":months,
        "qs": mon_list,
    }
    return render(request, 'dashboard.html',context)



def login_view(request):
    if request.method =="POST":
        username=request.POST.get('username')
        password=request.POST.get('password')
        usr=authenticate(username=username, password=password)
        if usr is not None:
            login(request, usr)
            return redirect('index_url')
    return render(request,'login.html')


def register_view(request):
    if request.method == "POST":
        username=request.POST['username']
        first_name=request.POST['first_name']
        last_name=request.POST['last_name']
        password=request.POST['password']
        User.objects.create_user(
            username=username,
            first_name=first_name,
            last_name=last_name,
            password=password,
        )
        return redirect('index_url')
    return render(request,'signup.html')



def user_view(request):
    conntext = {
        'user': User.objects.last().order_by('-id')[:1]
    }
    return render(request, 'base.html', conntext)


def log_out(request):
    logout(request)
    return redirect("login_url")









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































